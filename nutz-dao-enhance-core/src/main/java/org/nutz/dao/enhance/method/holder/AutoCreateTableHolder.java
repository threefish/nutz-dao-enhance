package org.nutz.dao.enhance.method.holder;

import lombok.extern.slf4j.Slf4j;
import org.nutz.dao.Dao;
import org.nutz.dao.enhance.annotation.IgnoreAutoDDL;
import org.nutz.dao.enhance.config.DaoProperties;
import org.nutz.dao.enhance.factory.DaoFactory;
import org.nutz.dao.enhance.util.MethodSignatureUtil;
import org.nutz.dao.entity.annotation.Table;
import org.nutz.dao.util.Daos;

import java.util.*;

/**
 * @author 黄川 huchuc@vip.qq.com
 */
@Slf4j
public class AutoCreateTableHolder {

    /**
     * 需要自动建表的数据源名称对应实体类映射,建完表就会清空
     */
    private static final HashMap<String, Set<Class<?>>> DATA_SOURCE_ENTITY_CLASS_MAPPING = new HashMap<>();

    public static void addDataSourceEntityClassMapping(String dataSourceName, String className) {
        try {
            addDataSourceEntityClassMapping(dataSourceName, Class.forName(className));
        } catch (ClassNotFoundException e) {
            log.error("扫描添加class失败：{}", className);
        }
    }

    public static void addDataSourceEntityClassMapping(String dataSourceName, Class<?> classZ) {
        // 当前dao上找到实体类
        final Class<?> classEntityType = MethodSignatureUtil.getClassEntityType(classZ);
        if (Objects.nonNull(classEntityType)) {
            Table table = classEntityType.getAnnotation(Table.class);
            IgnoreAutoDDL ignoreAutoCreateTable = classEntityType.getAnnotation(IgnoreAutoDDL.class);
            if (Objects.nonNull(table) && Objects.isNull(ignoreAutoCreateTable)) {
                // 是实体表定义类,并且没做忽略
                if (Objects.nonNull(classEntityType)) {
                    final Set<Class<?>> entityClassSets = DATA_SOURCE_ENTITY_CLASS_MAPPING.getOrDefault(dataSourceName, new HashSet<>());
                    entityClassSets.add(classEntityType);
                    DATA_SOURCE_ENTITY_CLASS_MAPPING.put(dataSourceName, entityClassSets);
                }
            }
        }
    }

    /**
     * 自动建表
     */
    public static void autoGenerateDdl(DaoFactory daoFactory, DaoProperties properties) {
        Daos.CHECK_COLUMN_NAME_KEYWORD = properties.isCheckColumnNameKeyword();
        Daos.FORCE_WRAP_COLUMN_NAME = properties.isForceWrapColumnName();
        Daos.FORCE_UPPER_COLUMN_NAME = properties.isForceUpperColumnName();
        Daos.FORCE_HUMP_COLUMN_NAME = properties.isForceHumpColumnName();
        Daos.DEFAULT_VARCHAR_WIDTH = properties.getDefaultVarcharWidth();
        if (!properties.isEnableDdl()) {
            return;
        }
        Optional.ofNullable(DATA_SOURCE_ENTITY_CLASS_MAPPING).ifPresent(stringSetHashMap -> {
            stringSetHashMap.forEach((dataSource, classes) -> {
                final Dao dao = daoFactory.getDao(dataSource);
                classes.parallelStream().forEach(tableEntityClass -> Daos.createTablesInPackage(dao, tableEntityClass, false));
                classes.parallelStream().forEach(tableEntityClass ->
                        Daos.migration(dao,
                                tableEntityClass,
                                properties.isMigrationAdd(),
                                properties.isMigrationDel(),
                                properties.isMigrationCheckIndex()));
            });
            DATA_SOURCE_ENTITY_CLASS_MAPPING.clear();
        });
    }
}
