package org.nutz.spring.boot.dao.spring.ddl;

import org.nutz.dao.util.Daos;
import org.nutz.spring.boot.dao.factory.DaoFactory;
import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;
import org.springframework.stereotype.Component;
import org.springframework.util.StringUtils;

import javax.annotation.PostConstruct;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.stream.Collectors;

/**
 * @author 黄川 huchuc@vip.qq.com
 */
@Component
@ConditionalOnBean(AutoGenerateDDL.class)
public class DefaualtAutoGenerateDDL implements AutoGenerateDDL {

    private HashMap<String, List<String>> packagesCatch = new HashMap<>();

    @PostConstruct
    public void generate() {
        packagesCatch.forEach((dataSource, packages) -> {
            for (String packageStr : packages) {
                if (!StringUtils.isEmpty(packageStr)) {
//                    Daos.createTablesInPackage(daoFactory.getDao(dataSource), packageStr, false);
//                    Daos.migration(daoFactory.getDao(dataSource), packageStr, true, true);
                }
            }
        });
    }

    @Override
    public void add(String[] packages, String dataSource) {
        final List<String> orDefault = this.packagesCatch.getOrDefault(dataSource, new ArrayList<>());
        orDefault.addAll(Arrays.stream(packages).collect(Collectors.toList()));
        this.packagesCatch.put(dataSource, orDefault);
    }
}
